# Example OpenAPI spec using YAML
# Be aware that YAML has indentation based scoping.
# https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md
# Generate client & server code stubs using http://editor.swagger.io/#/
swagger: '2.0'

# This is your document metadata
info:
  version: "0.0.1"
  title: Business Process API

# Describe your paths here
paths:
  # This is the version path endpoint.
  /version:
    # This is a HTTP operation (GET)
    get:
      # Describe this verb here. Note: you can use markdown
      summary: get the name and version string
      produces:
      - application/json
      responses:
        # Response code
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/Version'
  /content:
    get:
      summary: Get the business process definitions
      operationId: getProcessDefinitions
      produces:
      - application/json
      responses:
        # Response code
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/Process'
    post:
      summary: Add a new business process
      operationId: addProcessDefinition
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/Process'
      responses:
        # Response code
        200:
          description: BP added
          schema:
            $ref: '#/definitions/ApiResponse'
    put:
      description: Update a business process
      operationId: updateProcessDefinition
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/Process'
      responses:
        # Response code
        200:
          description: BP updated
          schema:
            $ref: '#/definitions/ApiResponse'
  /content/{processID}:
    get:
      summary: Get the business process definitions
      operationId: getProcessDefinition
      produces:
      - application/json
      parameters:
      - in: path
        name: processID
        type: string
        description: The id of the business process.
        required: true
      responses:
        # Response code
        200:
          description: BP obtained
          schema:
            $ref: '#/definitions/Process'
    delete:
      description: Deletes a business process definition
      operationId: deleteProcessDefinition
      produces:
      - application/json
      parameters:
      - in: path
        name: processID
        type: string
        required: true
      responses:
        # Response code
        200:
          description: BP deleted
          schema:
            $ref: '#/definitions/ApiResponse'

  /preference:
    post:
      summary: Add a new partner business process sequence preference
      operationId: addProcessPartnerPreference
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ProcessPreferences'
      responses:
        # Response code
        200:
          description: Partner Preference added
          schema:
            $ref: '#/definitions/ApiResponse'
    put:
      description: Update the business process preference of a partner
      operationId: updateProcessPartnerPreference
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/ProcessPreferences'
      responses:
        # Response code
        200:
          description: Partner Preference updated
          schema:
            $ref: '#/definitions/ApiResponse'
  /preference/{partnerID}:
    get:
      summary: Get the business process preference of a partner
      operationId: getProcessPartnerPreference
      produces:
      - application/json
      parameters:
      - in: path
        name: partnerID
        type: string
        description: The id of the partner.
        required: true
      responses:
        # Response code
        200:
          description: Partner Preference obtained
          schema:
            $ref: '#/definitions/ProcessPreferences'
    delete:
      description: Deletes the business process preference of a partner
      operationId: deleteProcessPartnerPreference
      produces:
      - application/json
      parameters:
      - in: path
        name: partnerID
        type: string
        required: true
      responses:
        # Response code
        200:
          description: Partner Preference deleted
          schema:
            $ref: '#/definitions/ApiResponse'

  /application:
    post:
      summary: Add a new partner business process application preference
      operationId: addProcessPartnerApplicationPreference
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ProcessApplicationConfigurations'
      responses:
        # Response code
        200:
          description: Partner Preference added
          schema:
            $ref: '#/definitions/ApiResponse'
    put:
      description: Update the business process application preference of a partner
      operationId: updateProcessPartnerApplicationPreference
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/ProcessApplicationConfigurations'
      responses:
        # Response code
        200:
          description: Partner Preference updated
          schema:
            $ref: '#/definitions/ApiResponse'

  /application/{partnerID}:
    get:
      summary: Get the business process application preferences of a partner for all processes
      operationId: getProcessPartnerApplicationPreference
      produces:
      - application/json
      parameters:
      - in: path
        name: partnerID
        type: string
        description: The id of the partner.
        required: true
      responses:
        # Response code
        200:
          description: Partner Preference obtained
          schema:
            type: array
            items:
              $ref: '#/definitions/ProcessApplicationConfigurations'
  /application/{partnerID}/{processID}:
    delete:
      description: Deletes the business process application preference of a partner for a process
      operationId: deleteProcessPartnerApplicationPreference
      produces:
      - application/json
      parameters:
      - in: path
        name: partnerID
        type: string
        required: true
      - in: path
        name: processID
        type: string
        required: true
      responses:
        # Response code
        200:
          description: Partner Preference deleted
          schema:
            $ref: '#/definitions/ApiResponse'

  /start:
    post:
      summary: Start an instance of a business process
      operationId: startProcessInstance
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ProcessInstanceInputMessage'
      responses:
        # Response code
        200:
          description: Business Process Instance Started
          schema:
            $ref: '#/definitions/ProcessInstance'

  /continue:
    post:
      summary: Send input to a waiting process instance (because of a human task)
      operationId: continueProcessInstance
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ProcessInstanceInputMessage'
      responses:
        # Response code
        200:
          description: Business Process Instance Message sent successfully
          schema:
            $ref: '#/definitions/ProcessInstance'

  /document:
    post:
      summary: Add a business process document metadata
      operationId: addDocumentMetadata
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ProcessDocumentMetadata'
      responses:
        # Response code
        200:
          description: Document added
          schema:
            $ref: '#/definitions/ApiResponse'
    put:
      description: Update a business process document metadata
      operationId: updateDocumentMetadata
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/ProcessDocumentMetadata'
      responses:
        # Response code
        200:
          description: Document updated
          schema:
            $ref: '#/definitions/ApiResponse'

  /document/{documentID}:
    delete:
      description: Deletes the business process document metadata together with content by id
      operationId: deleteDocument
      produces:
      - application/json
      parameters:
      - in: path
        name: documentID
        type: string
        required: true
      responses:
        # Response code
        200:
          description: Document deleted
          schema:
            $ref: '#/definitions/ApiResponse'

  /document/{partnerID}/{type}/{source}/{status}:
    get:
      summary: Get the business process document metadata
      operationId: getDocuments
      produces:
      - application/json
      parameters:
      - in: path
        name: partnerID
        type: string
        description: The id of the partner.
        required: true
      - in: path
        name: type
        type: string
        description: The type of the document
        required: true
      - in: path
        name: status
        type: string
        description: The status of the document. (APPROVED, WAITINGRESPONSE, DENIED or PASTDUE)
        required: true
      - in: path
        name: source
        type: string
        description: The source of the document (whether it is sent or received by the partner - SENT, RECEIVED).
        required: true
      responses:
        # Response code
        200:
          description: Document obtained
          schema:
            type: array
            items:
              $ref: '#/definitions/ProcessDocumentMetadata'

  /document/{partnerID}/{type}/{source}:
    get:
      summary: Get the business process document metadata
      operationId: getDocuments
      produces:
      - application/json
      parameters:
      - in: path
        name: partnerID
        type: string
        description: The id of the partner.
        required: true
      - in: path
        name: type
        type: string
        description: The type of the document
        required: true
      - in: path
        name: source
        type: string
        description: The source of the document (whether it is sent or received by the partner - SENT, RECEIVED).
        required: true
      responses:
        # Response code
        200:
          description: Document obtained
          schema:
            type: array
            items:
              $ref: '#/definitions/ProcessDocumentMetadata'

  /document/{partnerID}/{type}:
    get:
      summary: Get the business process document metadata
      operationId: getDocuments
      produces:
      - application/json
      parameters:
      - in: path
        name: partnerID
        type: string
        description: The id of the partner.
        required: true
      - in: path
        name: type
        type: string
        description: The type of the document
        required: true
      responses:
        # Response code
        200:
          description: Document obtained
          schema:
            type: array
            items:
              $ref: '#/definitions/ProcessDocumentMetadata'

definitions:

  Version:
    title: Version Object
    type: object
    properties:
      serviceId:
        type: string
      version:
        type: string

  ProcessPreferences:
    title: Business Process Preferences Object of a partner for all other partners
    type: object
    properties:
      partnerID:
        type: string
      preferences:
        type: array
        items:
          $ref: '#/definitions/ProcessPreference'

  ProcessPreference:
    title: Business Process Preference Object for a specific case (e.g. default or for a partner)
    type: object
    properties:
      targetPartnerID:
        type: string
        description: The value is DEFAULT or the partner ID for whom this preference is specified
      processOrder:
        type: array
        items:
          type: string
          enum:
          - CATALOGUE
          - NEGOTIATION
          - ORDER
          - REMITTANCEADVICE
          - INVOICE
          - TRACKING
          - FULFILLMENT
          - PRODUCTCONFIGURATION
          - OTHER

  Process:
    title: Business Process Object
    type: object
    properties:
      processID:
        type: string
      processName:
        type: string
      processType:
        type: string
        enum:
        - CATALOGUE
        - NEGOTIATION
        - ORDER
        - REMITTANCEADVICE
        - INVOICE
        - TRACKING
        - FULFILLMENT
        - PRODUCTCONFIGURATION
        - OTHER
      bpmnContent:
        type: string

  ExecutionConfiguration:
    title: Execution Configuration Object
    type: object
    properties:
      type:
        type: string
        enum:
        - JAVA
        - MICROSERVICE
        - OTHER
      URI:
        type: string

  ApplicationConfiguration:
    title: Application Configuration Object for each activity in a business process
    type: object
    properties:
      activityID:
        type: string
      name:
        type: string
      transactionName:
        type: string
        description: The transaction where the activity exist
      type:
        type: string
        enum:
        - DATAADAPTER
        - DATACHANNEL
        - DATAPROCESSOR
      execution:
        $ref: '#/definitions/ExecutionConfiguration'

  ProcessApplicationConfigurations:
    title: Applications in Business Process Configuration Object
    type: object
    properties:
      partnerID:
        type: string
      processID:
        type: string
      applicationConfigurations:
        type: array
        items:
          $ref: '#/definitions/ApplicationConfiguration'

  ProcessVariables:
    title: Business Process Variables Object
    type: object
    properties:
      processID:
        type: string
      initiatorID:
        type: string
      responderID:
        type: string
      contentUUID:
        type: string
        description: The UUID of the document in the content variable
      content:
        type: string

  ProcessInstanceInputMessage:
    title: Business Process Input Message Object
    type: object
    properties:
      variables:
        $ref: '#/definitions/ProcessVariables'
      processInstanceID:
        type: string

  ProcessInstance:
    title: Business Process Instance
    type: object
    properties:
      processInstanceID:
        type: string
      processID:
        type: string
      status:
        type: string
        enum:
        - STARTED
        - WAITING
        - ABORTED
        - COMPLETED

  ProcessDocumentMetadata:
    title: Business Process Document Metadata Object
    type: object
    properties:
      documentID:
        type: string
      submissionDate:
        type: string
      type:
        type: string
        enum:
        - CATALOGUE
        - REQUESTFORQUOTATION
        - QUOTATION
        - ORDER
        - ORDERRESPONSESIMPLE
        - REMITTANCEADVICE
        - INVOICE
        - APPLICATIONRESPONSE
        - TRANSPORTATIONSTATUS
        - DESPATCHADVICE
        - RECEIPTADVICE
        - OTHER
      status:
        type: string
        enum:
        - APPROVED
        - WAITINGRESPONSE
        - DENIED
        - PASTDUE
      processInstanceID:
        type: string
      initiatorID:
        type: string
      responderID:
        type: string

  ApiResponse:
    type: object
    properties:
      code:
        type: integer
      type:
        type: string
      message:
        type: string




  Order:
    id:
      type: string
    issueDate:
      type: string
    issueTime:
      type: string
    note:
      type: string
    buyerCustomerParty:
      $ref: '#/definitions/CustomerParty'
    sellerSupplierParty:
      $ref: '#/definitions/SupplierParty'
    taxTotal:
      $ref: '#/definitions/TaxTotal'
    anticipatedMonetaryTotal:
      $ref: '#/definitions/MonetaryTotal'
    orderLine:
      type: array
      items:
        $ref: '#/definitions/OrderLine'

  CustomerParty:
    party:
      $ref: '#/definitions/Party'

  SupplierParty:
    party:
      $ref: '#/definitions/Party'

  Party:
    id:
      type: string

  Amount:
    value:
      type: integer
    currencyID:
      type: string

  Amount:
    value:
      type: string
    listID:
      type: string

  Quantity:
    value:
      type: string
    unitCode:
      type: string

  TaxTotal:
    taxAmount:
      $ref: '#/definitions/Amount'
    taxSubtotal:
      type: array
      items:
        $ref: '#/definitions/TaxSubtotal'

  TaxSubtotal:
    taxAmount:
      $ref: '#/definitions/Amount'
    percent:
      type: integer
    taxCategory:
      $ref: '#/definitions/TaxCategory'

  TaxCategory:
    taxScheme:
      $ref: '#/definitions/TaxScheme'

  TaxScheme:
    taxTypeCode:
      $ref: '#/definitions/Code'

  MonetaryTotal:
    lineExtensionAmount:
      $ref: '#/definitions/Amount'
    taxExclusiveAmount:
      $ref: '#/definitions/Amount'
    taxInclusiveAmount:
      $ref: '#/definitions/Amount'
    allowanceTotalAmount:
      $ref: '#/definitions/Amount'
    chargeTotalAmount:
      $ref: '#/definitions/Amount'
    payableAmount:
      $ref: '#/definitions/Amount'

  OrderLine:
    note:
      type: string
    lineItem:
      $ref: '#definitions/LineItem'

  LineItem:
    id:
      type: string
    note:
      type: string
    quantity:
      $ref: '#/definitions/Quantity'
    lineExtensionAmount:
      $ref: '#/definitions/Amount'
    totalTaxAmount:
      $ref: '#/definitions/Amount'
    price:
      $ref: '#/definitions/Price'
    item:
      $ref: '#/definitions/Item'
    taxTotal:
      $ref: '#/definitions/TaxTotal'

  Price:
    priceAmount:
      $ref: '#/definitions/Amount'

  Item:
    description:
      type: string
    name:
      type: string
    sellerItemIdentification:
      type:
        $ref: '#/definitions/ItemIdentification'
    commodityClassification:
      type: array
      items:
        $ref: '#/definitions/CommodityClassification'

  ItemIdentification:
    id:
      type: string

  OrderReference:
    id:
      type: string

  CommodityClassification:
    itemClassificationCode:
      $ref: '#/definitions/Code'

  OrderResponse:
    id:
      type: string
    issueDate:
      type: string
    issueTime:
      type: string
    note:
      type: string
    acceptedIndicator:
      type: boolean
    rejectionNote:
      type: string
    orderReference:
      $ref: '#/definitions/OrderReference'
    sellerSupplierParty:
      $ref: '#/definitions/SupplierParty'
    buyerCustomerParty:
      $ref: '#/definitions/CustomerParty'
